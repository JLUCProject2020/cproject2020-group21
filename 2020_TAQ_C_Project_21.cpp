#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <time.h>
#include <string.h>

#define WIDTH 80
#define HEIGHT 24

HANDLE hOutPut;






typedef struct player {
    int hp;
    int magic;
    int v;
    COORD pos;
}PR;//basic character of a player






int start();
void initconsoleScreenBuffer();
int show(char input, PR* player1, PR* player2,int map1[HEIGHT][WIDTH]);



static char date[HEIGHT][WIDTH]; 
   //存放画面的二维数组

static HANDLE hOutBuf1, hOutBuf2;
//两个句柄，这里可以就理解为我们等会需要用的两个缓冲区

static COORD coord = { 0,0 };  
//位置坐标


static DWORD bytes = 0;       
 //这个主要是要配合下面的一个函数
int map[HEIGHT][WIDTH] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,5,0,0,0,0,0,4,0,0,0,0,0,5,0,0,0,0,0,4,0,0,0,0,0,5,0,0,0,0,0,5,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2},
{0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};








int map2[HEIGHT][WIDTH] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,1,0,0,0,0,0,0,0,0,6,1,0,0,0,0,0,0,0,0,0,1,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,16,1,6,6,6,6,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,1,1,1,6,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,6,1,6,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,1,1,1,1,6,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,6,15,0,6,6,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0},
{0,0,0,0,6,1,6,6,6,6,6,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,15,0,0,0,0,0,0,0,1,0,0,6,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,15,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}};








int map3[HEIGHT][WIDTH] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,0},
{0,0,21,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
{0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,6,1,1,1,1,1,1,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,6,1,6,6,6,6,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,1,6,0,0,0,6,1,6,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,6,1,6,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,6,1,6,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,18,18,0,0,0,0,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,6,6,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,6,0,0,0,0,0,0,1,6,6,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,6,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,1,6,0,0,0,0,6,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,1,6,0,0,0,0,6,1,0,0,0,1,6,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,6,1,1,1,1,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,1,6,0,0,0,0,6,1,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,15,15,0,0,6,6,6,1,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,1,6,0,0,0,0,6,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
{0,0,0,0,6,1,6,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,1,6,0,0,0,0,6,1,0,0,0,1,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,1,1,6,0,0,0,0,0,0},
{0,0,0,0,6,1,6,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,6,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,6,1,1,0,0,0,17,17,0},
{0,0,22,0,0,0,6,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,6,1,1,1,1,1,1,0},
{0,1,1,1,0,0,6,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};












PR player1 = { 1,1,3,{4,22} };


    PR player2 = { 1,1,3,{3,22} };


int score[2]={0,0};

int start(int map1[HEIGHT][WIDTH])


{
    int i,j;
    
    for (i=0;i<HEIGHT;i++)
    
        for(j=0;j<WIDTH;j++)
        
        {
        	
            if (map1[i][j]==21)
            {player1.pos.Y=i;
            player1.pos.X=j;}

            
            if (map1[i][j]==22)
            {player2.pos.Y=i;
            player2.pos.X=j;}
        }
        
    initconsoleScreenBuffer();





    
    if(!MessageBoxA(NULL, "点击\"确定\"以开始", "游戏名称", MB_OKCANCEL | MB_ICONINFORMATION))
        return 0;
        
    char input;
    
    while (1) {
        input = _getch();
        
        if (input == ' ')
            break;
    }


    while (1)
    {
    	
        if (_kbhit())
        
        {
            input = _getch();
            
        }
        if (!show(input, &player1, &player2,map1))
        
        {
            return 0;
            
        }
        input = ' ';
        
        if (player2.pos.Y <= 22)
            player2.pos.Y += 1;

            
        if (map1[player2.pos.Y][player2.pos.X] == 1||map1[player2.pos.Y][player2.pos.X] == 3)
            player2.pos.Y -= 1;

            
        if (player1.pos.Y <= 22)
            player1.pos.Y += 1;


            
        if (map1[player1.pos.Y][player1.pos.X] == 1||map1[player1.pos.Y][player1.pos.X] == 3)
            player1.pos.Y -= 1;


            
        if (map1[player2.pos.Y][player2.pos.X] == 5)
            {player2.hp+=1;
            map1[player1.pos.Y][player1.pos.X]=0;}

            
            
            
        if (map1[player1.pos.Y][player1.pos.X] == 4)
            {player1.hp+=1;
            map1[player1.pos.Y][player1.pos.X]=0;}
            
            
            
        if (map1[player1.pos.Y][player1.pos.X] == 6)
            {player1.hp-=1;
            map1[player1.pos.Y][player1.pos.X]=0;
            
            
            
            if (player1.hp==0)
                {player1.hp+=1;
                goto END1;}
            }
            
            
            
        if (map1[player2.pos.Y][player2.pos.X] == 6)
            {player2.hp-=1;
            map1[player2.pos.Y][player2.pos.X]=0;
            
            
            
            
            if (player2.hp==0)
                {player2.hp+=1;
                goto END2;}}
            
			
			
			    
        if (map1[player2.pos.Y - 1][player2.pos.X] == 0 && map1[player2.pos.Y][player2.pos.X] == 2)
        {
        	
        	
        	
            score[1]+=1;
            END1:
            if(!MessageBoxA(NULL, "Player 2 wins!\n", "游戏结束", MB_OKCANCEL | MB_ICONINFORMATION))
                return 0;
            else
                return 1;
        }
        
        
        
        
        
        if (map1[player1.pos.Y - 1][player1.pos.X] == 0 && map1[player1.pos.Y][player1.pos.X] == 2)
        {
            score[0]+=1;
            END2:
            if(!MessageBoxA(NULL, "Player 1 wins!\n", "游戏结束", MB_OKCANCEL | MB_ICONINFORMATION))
                return 0;
            else
                return 1;
        }
        
        
        
        
        
        
        
        Sleep(100);
    }
    return 0;
}


void initconsoleScreenBuffer()



{
    hOutBuf1 = CreateConsoleScreenBuffer(  //创建缓冲区
        GENERIC_WRITE,
        FILE_SHARE_WRITE,
        NULL,
        CONSOLE_TEXTMODE_BUFFER,
        NULL
    );





    
    hOutBuf2 = CreateConsoleScreenBuffer(  //创建缓冲区
        GENERIC_WRITE,
        FILE_SHARE_WRITE,
        NULL,
        CONSOLE_TEXTMODE_BUFFER,
        NULL
    );
    
    //以下5行是设置这两个缓冲区的光标不可见
    CONSOLE_CURSOR_INFO cci;
	  //创建光标
    
	cci.bVisible = 0; 
	   //光标可见度为0
    
	cci.dwSize = 1;  
	    //光标大小为1，可省略
    
	SetConsoleCursorInfo(hOutBuf1, &cci); 	
	//设置第一个缓冲区的光标参数
	
    SetConsoleCursorInfo(hOutBuf2, &cci); 
	//设置第二个缓冲区的光标参数
    
	//这里我们初始化我们的地图
    
	coord.Y++;
    
	WriteConsoleOutputCharacterA(hOutBuf1, "please press space to start", sizeof("please press space to start\n")- 2, coord, &bytes);
    
	printf("Health of p1:%d     Health of p2:%d",player1.hp,player2.hp);
    SetConsoleActiveScreenBuffer(hOutBuf1);
}



int show(char input, PR* player1, PR* player2,int map1[HEIGHT][WIDTH])
{
    switch (input)//确定方向
    {
        case 'a':



        	
            if (player1->pos.X >= 3)
                player1->pos.X -= player1->v;
            break;




        case 'd':        	
            if (player1->pos.X <= 74)
                player1->pos.X += player1->v;
            break;
			
			

			
        case 'w':        	
            if ((player1->pos.Y - 3) <= 0)
                player1->pos.Y = 1;
            else
                player1->pos.Y -= 3;
            break;
            
            
            
        
		    
        case ',':
        	
            if (player2->pos.X >= 3)
                player2->pos.X -= player1->v;
            break;
            
            
        
		    
            
        case '.':
        	
            if (player2->pos.X <= 74)
                player2->pos.X += player1->v;
            break;
        
		
		
		
		
		case 'l':
        	
            if ((player2->pos.Y - 3) <= 0)
                player2->pos.Y = 1;
            else
                player2->pos.Y -= 3;
            break;
            
            
            
            
        case '0':
            return 0;
    }
    
    
    for (int i = 0; i < HEIGHT; i++)
    
	{
    
	    for (int j = 0; j < WIDTH; j++)
    
	    {
    
	        if (map1[i][j] == 2)
            {
    
	            date[i][j] = '=';
            }
    
	        else if (map1[i][j] == 1)
            {
    
	            date[i][j] = '#';
            }
    
	        else if (map1[i][j] == 3)
            {
    
	            date[i][j] = '#';
    
	        }
    
	        else if (map1[i][j] == 4)
            {
    
	            date[i][j] = '?';
            }
    
	        else if (map1[i][j] == 5)
            {
    
	            date[i][j] = '&';
            }
    
	        else if (map1[i][j] == 6)
            {
    
	            date[i][j] = '*';
            }
    
	        else if (map1[i][j] == 15)
            {
    
	            date[i][j] = '<';
            }
    
	        else if (map1[i][j] == 18)
            {
    
	            date[i][j] = '>';
            }
    
	        else date[i][j] = ' ';
        }
    
	}
    
    coord.X = 0;
    
    for (int i = 0; i < HEIGHT; i++)
    
    {
        coord.Y = i;
        //坐标位置设定为第i行第0列，下面的函数需要这个坐标位置
    
	    WriteConsoleOutputCharacterA(hOutBuf1, date[i], WIDTH, coord, &bytes);
        //向缓冲区写入内容（不管这个缓冲区需要需要显示都可以写入）
    
	    //五个参数分别是
    
	    /*缓冲区名、
    
	    *需要写入的内容首地址、
    
	    *需要写入内容的长度、
    
	    *开始写入的位置、
    
	    *记录成功写入了多少（这里没用，只是为了配合这个函数）
    
	    */
    
	}
    
	//将这个缓冲区显示在控制台上
    
	coord.X = player1->pos.X;    
    coord.Y = player1->pos.Y;

    SetConsoleTextAttribute(hOutBuf1, 0x0C);
    
	
	char *A = "@", *B = "$";
    
	WriteConsoleOutputCharacter(hOutBuf1, A, 1, coord, &bytes);
    
	coord.X = player2->pos.X;
    coord.Y = player2->pos.Y;
    
	WriteConsoleOutputCharacter(hOutBuf1, B, 1, coord, &bytes);
    
	SetConsoleActiveScreenBuffer(hOutBuf1);
    
    //继续输入，此时我们始终显示的hOutBuf，只有再次设置显示另一个缓冲区或程序结束才会改变显示的缓冲区
    if (_kbhit())
    {
    
	    input = _getch();
        switch (input)
        {
    
	
	    case 'a':
            if (player1->pos.X >= 3)
                player1->pos.X -= player1->v;
            break;
    
	
	
	    case 'd':
            if (player1->pos.X <= 74)
                player1->pos.X += player1->v;
            break;
    
	
	
	    case 'w':
            if ((player1->pos.Y - 3) <= 0)
                player1->pos.Y = 1;
            else
                player1->pos.Y -= 3;
            break;
    
	
	
	    case ',':
            if (player2->pos.X >= 3)
                player2->pos.X -= player1->v;
            break;
    
	
	
	    case '.':
            if (player2->pos.X <= 74)
                player2->pos.X += player1->v;
            break;
    
	
	
	    case 'l':
            if ((player2->pos.Y - 3) <= 0)
                player2->pos.Y = 1;
            else
                player2->pos.Y -= 3;
            break;
    
	
	
	    case '0':
            return 0;
        }
    
	}
    
	
	for (int i = 0; i < HEIGHT; i++)
    	
	{
    

	    for (int j = 0; j < WIDTH; j++)
    
	    {
            if (map1[i][j] == 2)
    
	        {
    
	
	            date[i][j] = '=';
    
	         }
    
	
	        else if (map1[i][j] == 1)
    
	        {
    
	            date[i][j] = '#';
    
	        }
    
	        else if (map1[i][j] == 3)
    
	        {
    
	            date[i][j] = '#';
    
	        }
    
	        else if (map1[i][j] == 4)
    
	        {
    
	            date[i][j] = '?';
    
	        }
    
	
	        else if (map1[i][j] == 5)
    
	        {
    
	            date[i][j] = '&';
    
	        }
    
	        else if (map1[i][j] == 6)
    
	        {
    
	            date[i][j] = '*';
    
	        }
    
	        else date[i][j] = ' ';
    
	
	    }
    
	}
    coord.X = 0;
    
	
	for (int i = 0; i < HEIGHT; i++)
    
	{
    
	    coord.Y = i;
    
	    WriteConsoleOutputCharacterA(hOutBuf2, date[i], WIDTH, coord, &bytes);
    
	}
    
	coord.X = player1->pos.X;
    
	coord.Y = player1->pos.Y;
    
	WriteConsoleOutputCharacter(hOutBuf2, A, 1, coord, &bytes);
    
    
	coord.X = player2->pos.X;
    
	coord.Y = player2->pos.Y;

    
	WriteConsoleOutputCharacter(hOutBuf2, B, 1, coord, &bytes);
    
	
	
	SetConsoleActiveScreenBuffer(hOutBuf2);
    
	return 1;
}






int main()

{

    int a=0,b=0;

    char ch,ch1,ch2,ch3;

    char namep1[10];

    char namep2[10];

    printf("Before it begins, we want to give your role a  name!\n");

    Sleep(1000);

    

    printf("So here are our questions:\n");

    Sleep(1000);

    

    printf("Player1, listen!\n");

    printf("Which season do you like best?\nA spring or summer   B autumn or winter\n");

    scanf("%c",&ch);

    getchar();

    

    

    printf("Which weather do you like best?\nA sunny   B autumn or cloudy\n");

    scanf("%c",&ch1);

    getchar();

    printf("Which sense do you prefer?\nA chill   B hot\n");

    scanf("%c",&ch2);

    getchar();

    

    

    printf("Your age please?\nA young or teen   B adult or cold\n");

    scanf("%c",&ch3);

    getchar();

    


    

    if(ch=='A'&&ch=='a')

    {

        if(ch1=='A'&&ch1=='a')

        {

            if(ch2=='A'&&ch2=='a')

            {

                if(ch3=='A'&&ch3=='a')
                    strcpy(namep1,"Lavender");


                else

                    strcpy(namep1,"Tulip");

            }

            

            

            else

            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep1,"Rose");

                else

                    strcpy(namep1,"Lotus");

            }

        }

        

        

        else

        {

            if(ch2=='A'&&ch2=='a')

            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep1,"Jasmine");

                else

                    strcpy(namep1,"Lily");

            }

            

            

            else

            {


                if(ch3=='A'&&ch3=='a')

                    strcpy(namep1,"Carnation");

                else

                    strcpy(namep1,"Chrysanthemum");

            }

        }

    }

    

    


    else

    {

        if(ch1=='A'&&ch1=='a')

        {

            if(ch2=='A'&&ch2=='a')

            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep1,"Cherry");

                else

                    strcpy(namep1,"Peony");

            }

            else


            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep1,"Cuckoo");

                else

                    strcpy(namep1,"Garnet");

            }

        }

        

        

        else

        {

            if(ch2=='A'&&ch2=='a')

            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep1,"Peony");

                else

                    strcpy(namep1,"Orchid");

            }

            

            else

            {

                if(ch3=='A'&&ch3=='a')


                    strcpy(namep1,"Camellia");

                else

                    strcpy(namep1,"Leaves");

            }


        }

    }

    

    system("cls");

    printf("Name of player 1 is:%s !\n",namep1);




    printf("Player2, listen!\n");


    printf("Which season do you like best?\nA spring or summer   B autumn or winter\n");


    scanf("%c",&ch);


    getchar();


    

    

    printf("Which weather do you like best?\nA sunny   B autumn or cloudy\n");

    scanf("%c",&ch1);

    getchar();

    


    

    printf("Which sense do you prefer?\nA chill   B hot\n");

    scanf("%c",&ch2);

    getchar();

    

    

    printf("Your age please?\nA young or teen   B adult or cold\n");

    scanf("%c",&ch3);

    getchar();

    if(ch=='A'&&ch=='a')


    {

        if(ch1=='A'&&ch1=='a')

        {

            if(ch2=='A'&&ch2=='a')

            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep2,"Lavender");

                else

                    strcpy(namep2,"Tulip");


            }

            else

            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep2,"Rose");

                else

                    strcpy(namep2,"Lotus");

            }

        }

        else

        {

            if(ch2=='A'&&ch2=='a')


            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep2,"Jasmine");

                else

                    strcpy(namep2,"Lily");

            }

            else


            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep2,"Carnation");

                else

                    strcpy(namep2,"Chrysanthemum");

            }

        }

    }

    else

    {


        if(ch1=='A'&&ch1=='a')

        {

            if(ch2=='A'&&ch2=='a')

            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep2,"Cherry");

                else

                    strcpy(namep2,"Peony");


            }

            else

            {

                if(ch3=='A'&&ch3=='a')

                    strcpy(namep2,"Cuckoo");

                else

                    strcpy(namep2,"Garnet");


            }

        }



        else


        {

            if(ch2=='A'&&ch2=='a')

            {

                if(ch3=='A'&&ch3=='a')


                    strcpy(namep2,"Peony");

                else

                    strcpy(namep2,"Orchid");

            }

            else

            {


                if(ch3=='A'&&ch3=='a')

                    strcpy(namep2,"Camellia");

                else

                    strcpy(namep2,"Leaves");


            }

        }

    }

    system("cls");


    printf("Name of player 2 is:%s !\n\nloading maps...",namep2);

    Sleep(2000);

	a=start(map);

    if(a==1)


    {


        b=start(map2);

    }

    if(b==1)

        start(map3);
    Sleep(800);


    system("cls");



    printf("Totals:\n\nPlayer1:\nName:%s\nScore:%d\nRemain health:%d\n\nPlayer2:\nName:%s\nScore:%d\nRemain health:%d",namep1,score[0],player1.hp,namep2,score[1],player2.hp);


	return 0;


}
